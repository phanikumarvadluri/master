1) Hello world (System.out.println("Hello")== done

Example :

Create a package com.arthimaticopeations
Create class ArthematicOperationDemo
run


package com.arthimaticopeations;

public class ArthematicOperationDemo {

    public static void main(String args[])
    {
        System.out.println("Helloooo");
    }
}



2) Java comments---
   single line comment===== //
   multiline comment======/* sldkjfdksjfksffjf*/
   Java doc comment-- used to explain what method or class is doing=======   /**   skfhskdhfsdh */

3) package---- just easy understand    Yes



DEMO:

public static void main(String args[])
    {
        System.out.println("Helo");
        System.out.println(7);
        System.out.println(10.7);
        System.out.println('F');
    }



4) Variables
   Primitive datatypes:  byte,short,int,long,float,double,char,boolean

   =================================

Data Type	Size	Description
byte	1 byte	Stores whole numbers from -128 to 127
short	2 bytes	Stores whole numbers from -32,768 to 32,767
int	4 bytes	Stores whole numbers from -2,147,483,648 to 2,147,483,647
long	8 bytes	Stores whole numbers from -9,223,372,036,854,775,808 to 9,223,372,036,854,775,807
float	4 bytes	Stores fractional numbers. Sufficient for storing 6 to 7 decimal digits
double	8 bytes	Stores fractional numbers. Sufficient for storing 15 decimal digits
boolean	1 bit	Stores true or false values
char	2 bytes	Stores a single character/letter or ASCII values

5) Arthmatic Operators:

double example:

package com.arthimaticopeations;


/**
 * +,-,*,/,%
 */
public class ArthematicOperationDemo {

    public static void main(String args[]) {

        double a=20d;
        double b=17d;

        System.out.println(a+b);//  37.0
        System.out.println(a-b);//  3.0
        System.out.println(a*b);// 340.0
        System.out.println(a/b);// 1.1764705882352942
        System.out.println(a%b);// 3.0

    }
}
============
float example:

    public class ArthematicOperationDemo {

        public static void main(String args[]) {

            float a=20f;
            float b=17f;

            System.out.println(a+b);//  37.0
            System.out.println(a-b);//  3.0
            System.out.println(a*b);// 340.0
            System.out.println(a/b);// 1.1764706
            System.out.println(a%b);// 3.0



        }
    }

    ====================
    int example :


     public class ArthematicOperationDemo {

            public static void main(String args[]) {

                int a=20;
                int b=17;

                System.out.println(a+b);//  37
                System.out.println(a-b);//  3
                System.out.println(a*b);// 340
                System.out.println(a/b);// 1
                System.out.println(a%b);// 3



            }
        }

  ==========================================================
  byte example:

   public class ArthematicOperationDemo {

          public static void main(String args[]) {

              byte a=17;
              byte b=20;

              System.out.println(a+b);//  37
              System.out.println(a-b);//  -3
              System.out.println(a*b);// 340
              System.out.println(a/b);// 0
              System.out.println(a%b);// 17



          }
      }
      ========================================


      same example with assiging to a variable:


      public class ArthematicOperationDemo {

          public static void main(String args[]) {

              int a = 17;
              int b = 20;

              int add = a + b;
              int sub = a - b;
              int mul = a * b;
              int div = a / b;
              int modulus = a % b;

              System.out.println(add);//  37
              System.out.println(sub);//  -3
              System.out.println(mul);// 340
              System.out.println(div);// 0
              System.out.println(modulus);// 17


          }
      }


      ===================


      Compound assignment operators:

      public class CompoundExample {
          public static void main(String[] args) {
              int a = 10;
              int b = 30;
              int res = a + b;
              System.out.println(res);
              //res = res + 10; //old style
              res+=10;
              System.out.println(res);
          }
      }

      =====================================


      public class CompoundExample {
          public static void main(String[] args) {
              int a = 10;
              int b = 30;
              int res = a - b;
              System.out.println(res);//-20
              //res = res - 67;
              res-=67;
              System.out.println(res);//-87
          }
      }

======================================================================


public class CompoundExample {
    public static void main(String[] args) {
        int a = 10;
        int b = 30;
        int res = a * b;
        System.out.println(res);//300
        //res = res * 2;
        res*=2;
        System.out.println(res);//600
    }
}
===================================================================================


nu) Post and pre

public class Other {

    public static void main(String[] args) {
        int a=10;
        System.out.println(++a);//11
        System.out.println(a);//11
    }
}


=========================================

public class PrefixandPostfix {

    /**
     * ++variable(pre increment operator)   vs variable++(post increment operator)
     *
     * @param args
     */
    public static void main(String[] args) {
        int a = 10;
        System.out.println(a++);//10
        System.out.println(a);//11
    }
}

Logical Operators:


public class LogicalOperators {

    public static void main(String[] args) {
        //  &&, ||
        /*
        &&
        =============
        TRUE && TRUE= TRUE
        TRUE && FALSE= FALSE
        FALSE && TRUE= FALSE
        FLASE && FALSE= FALSE
        ||
        TRUE || TRUE= TRUE
        TRUE || FALSE= TRUE
        FALSE || TRUE= TRUE
        FLASE || FALSE= FALSE
         */
        boolean a = true;
        boolean b= true;

        System.out.println(a&&b); // true
        System.out.println(a||b);//  true
    }
}

=======================================================================


Other example:

 public static void main(String[] args) {
        //  &&, ||
        /*
        &&
        =============
        TRUE && TRUE= TRUE
        TRUE && FALSE= FALSE
        FALSE && TRUE= FALSE
        FLASE && FALSE= FALSE
        ||
        TRUE || TRUE= TRUE
        TRUE || FALSE= TRUE
        FALSE || TRUE= TRUE
        FLASE || FALSE= FALSE
         */
        boolean a = false;
        boolean b = true;
        boolean c = false;
        System.out.println((a && b) || (a || c)); //    false  ---> (false  || false) ---false
        System.out.println((a || b) && (b && c));  //   false ----> (true && false)--- false

    }

    ====================================

    Relational Operators:


    public class RelationalOperators {

        public static void main(String[] args) {
            //> , >=, <,<=,==,!=
            int a = 12;
            int b = 10;
            System.out.println(a > b);
        }
    }


    ====================================
    if statement--(if else)

    public class IfelseExample {

        public static void main(String[] args)
        {
            boolean flag=true;
            if(flag)
            {
                System.out.println("flag value is true");
            }
            else{
                System.out.println("flag value is false");
            }
        }
    }
    =====================================================


    public class IfelseExample {

        public static void main(String[] args)
        {
            int a=20;
            int b=10;
            if(a>b)   //if(true)
            {
                System.out.println("a is big!");
            }
            else{
                System.out.println("b is big!");
            }
        }
    }


==========================================================================

public class IfelseExample {

    public static void main(String[] args) {
        int a = 30;
        int b = 20;
        int c = 10;

        if (a > b && a > c)  // if(true && true)--true
        {
            System.out.println("a is big");
        } else if (b > a && b > c) {
            System.out.println("b is big");
        } else {
            System.out.println("c is big!");
        }
    }
}
=======================================================

public class IfelseExample {

    public static void main(String[] args) {
       int number=-10;

       if(number>0)// false
       {
           System.out.println("Possitive number");
       }
       else if(number==0)  //false
       {
           System.out.println("Number is zero");
       }
       else{
           System.out.println("negative number");
       }
    }
}

=========================================================

Calengine Project:

public class Calengine {

    public static void main(String[] args) {

        double val1 = 10.9d;
        double val2 = 89.9d;
        char ops = 'd';
        double res = 0.0;

        if (ops == 'a') {  // false
            res = val1 + val2;
        }
        else if (ops == 's') { // false
            res = val1 - val2;
        }
        else if (ops == 'm') {// false
            res = val1 * val2;
        }
        else if (ops == 'd') {
            res = val1 / val2;   //res= 10.9/89.9d====
        }
        else if (ops == 'r') {
            res = val1 % val2;
        }
        System.out.println("Res " + res);

    }
}

==========================


Switch Statement:


public class CalengineWithCase {
    public static void main(String args[]) {
        double a = 23.0d;
        double b = 11.0d;
        char ops = 'z';
        double res = 0.0d;
        switch (ops) {
            case 'a':
                res = a + b;
                break;
            case 's':
                res = a - b;
                break;

            case 'm':
                res = a * b;
                break;

            case 'd':
                res = a / b;
                break;

            case 'r':
                res = a % b;
                break;

            default:
                System.out.println("Entered invalid ops code");
        }
        System.out.println(res);
    }
}
====================================================

For loop:


public class ForEachExample {

    public static void main(String args[]) {

        //for(inilize ; condition; increament)
        for (int j = 0; j <= 10000; j++) {
            System.out.println(j);
        }
    }
}
=========================================================


While Loop:


public class WhileLoop {

    public static void main(String[] args) {


        int res = 1;
        while (res <= 10) {
            System.out.println(res);
            res++;
        }
    }
}


==========================================

Dowhile:

public class DoWhile {

    public static void main(String[] args) {
        int res=1;
        do {
            System.out.println(res);
            res++;
        }
        while (res<10);
    }
}
====================

fot inside for



public class ForLoopEx2 {

    public static void main(String[] args) {
        for(int i=1;i<=5;i++)
        {
            System.out.println(i);

            for(int j=1;j<=3;j++)
            {
                System.out.println("Inner Loop j"+ j);
            }
        }
    }
}
=========================================================
sum of numbers using for loop


public class SumOfNumbers {

    public static void main(String[] args) {

        int sum = 0;

        for (int i = 0; i <= 10; i++) {
            sum = sum + i;
        }

        System.out.println(sum);

    }
}

=====================================================================

SQRT:


public class Mathopers {

    public static void main(String[] args) {

        int num=25;

        double sqrt = Math.sqrt(num);

        System.out.println(sqrt);

    }

}
==========================================================

public class PrimeNumbers {

    public static void main(String[] args) {
        for (int i = 2; i <= 100; i++) {
            boolean isPrime = true;
            for (int j = 2; j <= Math.sqrt(i); j++) {  // Only check up to the square root of i
                if (i % j == 0) {  // If divisible by any number, it's not prime
                    isPrime = false;
                    break;
                }
            }
            // If the number is prime, print it
            if (isPrime) {
                System.out.print(i + " ");
            }

        }
    }
}

//Explanation
//Outer loop (for (int i = 2; i <= range; i++)) iterates through each number in the range.
//        Inner loop (for (int j = 2; j <= Math.sqrt(i); j++)) checks if the current number i is divisible by any number up to its square root.
//If a number is divisible by any number other than 1 and itself, it is not prime.


=====================================================


public class Whileloopsample {

    public static void main(String[] args) {
        int number = 9999;// 1+2+3+4=10//   3467=20
        int sum = 0;
        while (number > 0) {
            sum = sum + number % 10;// sum=0+4// sum=4
            number = number / 10;// 1234/10=123
        }
        System.out.println(sum);
    }
}


====================================================

public class Whileloopsample {

    public static void main(String[] args) {
        int number = 88878;//   0
        int sum = 0;
        while (number > 0) {
            sum = sum + number % 10;
            number = number / 10;
            System.out.println(sum);
        }
    }
}


======================

public class ArrayExample {

    public static void main(String[] args) {
         // one way
          // int[] arr={1,2,3,4,5};

  // created array
           int[] arr=new int[5];
           arr[0]=10;
           arr[1]=20;
           arr[2]=30;
           arr[3]=40;
           arr[4]=50;


           // printed array using for loop
           for(int i=0;i<arr.length;i++)
           {
               System.out.println(arr[i]);
           }

    }
}
========================================================================


Arrays:

    public static void main(String[] args) {


           double[] values=new double[3];

           values[0]=10.9d;
           values[1]=55.0d;
           values[2]=99.9d;

           for(int i=0;i<values.length;i++)
           {
               System.out.println(values[i]);
           }

    }
}


=============================================

 public static void main(String[] args) {

        int a=10;
// one way
        int[] values=new int[5];

        values[0]=10;
        values[1]=20;
        values[2]=30;
        values[3]=40;
        values[4]=60;

        for(int i=0;i<values.length;i++)
        {
            System.out.println(values[i]);
        }
    }

    ==========================


    public static void main(String[] args) {


           double[] values= {10.9d,55.0d,99.9d};

        for(int i=0;i<values.length;i++)
           {
               System.out.println(values[i]);
           }

    }

    ===============================

    package basics;

    public class CalenginewithArrays {

    //    double[] values1=new double[5];
    //    values1[0]=100.0d;
    //    values1[1]=200.0d;
    //    values1[2]=250.0d;
    //    values1[3]=600.0d;
    //    values1[4]=840.0d;

        public static void main(String[] args) {

            double[] values1 = {100.0d, 200.0d, 250.0d, 600.0d, 840.0d};
            double[] values2 = {50.0d, 150.0d, 200.0d, 300.0d, 440.0d};
            char[] opsCodes = {'a', 's', 'm', 'd', 'r'};
            double[] res = {0.0, 0.0, 0.0, 0.0, 0.0};

            for (int i = 0; i < opsCodes.length; i++) {
                if (opsCodes[i] == 'a') {
                    res[i] = values1[i] + values2[i];
                } else if (opsCodes[i] == 's') {
                    res[i] = values1[i] - values2[i];
                } else if (opsCodes[i] == 'm') {
                    res[i] = values1[i] * values2[i];
                } else if (opsCodes[i] == 'd') {
                    res[i] = values1[i] / values2[i];
                } else if (opsCodes[i] == 'r') {
                    res[i] = values1[i] % values2[i];
                }
            }

            for (int i = 0; i < res.length; i++) {
                System.out.println(res[i]);
            }

        }
    }
==================================================
Bubble sort:

public class ForLoops {

    public static void main(String[] args) {
        int[] arr = new int[6];
        arr[0] = 90;
        arr[1] = -22;
        arr[2] = 1;
        arr[3] = 4;
        arr[4] = 100;
        arr[5] = 2;// unsorted=== 5

        //Bubble sort
        //Iteration1
        for (int i = arr.length - 1; i > 0; i--) {
            for (int j = 0; j < i; j++) {
                if (arr[j] > arr[j + 1]) {
                    int temp = arr[j];
                    arr[j] = arr[j + 1];
                    arr[j + 1] = temp;
                }
            }



        }

        for (int i = 0; i < arr.length; i++) {
            System.out.println(arr[i]);
        }
    }
}

====================================================================================

String:

public class ForLoops {

    public static void main(String[] args) {
        //primitive datatypes----  byte,short,int,long,float,double,char,boolean
        //array - hold muliple values of any above types====sort we----
        // String

        String hello="HelloWorld";
        String hello2=new String("HelloWorld");

        System.out.println(hello);
        System.out.println(hello2);

    }
}
===============================================
length of string:


public class ForLoops {

    public static void main(String[] args) {
        //primitive datatypes----  byte,short,int,long,float,double,char,boolean
        //array - hold muliple values of any above types====sort we----
        // String

        String hello="HelloWorld";

        int length = hello.length();
        System.out.println(length);


    }
}

======================================================
Simple method call


package methods;

public class MethodSample {

    public static void main(String[] args) {
        System.out.println("Before method call");
        message();
        System.out.println("After method call");
    }

    public static void message()
    {
        System.out.println("Created first method in java");
    }
}
================================================
package methods;

public class MethodSample {

    public static void main(String[] args) {
        method1();
        MethodSample.method2();
    }

    public static void method1()
    {
        System.out.println("method1");
    }

    public static void method2()
    {
        System.out.println("method2");
    }
}
===========================================

package methods;

public class MethodSampleStatic {

    public static void main(String[] args) {
         MethodSampleStatic.m3();
         m2();
         m1();

    }

    public static void m1()
    {
        System.out.println("m1");
    }
    public static void m2()
    {
        System.out.println("m2");
    }
    public static void m3()
    {
        System.out.println("m3");
    }
}
========================================
package methods;

public class SecondClass {

    public static void m1()
    {
        System.out.println("m1");
    }
    public static void m2()
    {
        System.out.println("m2");
    }
}


=====================================
package methods;

public class FirstClass {
    public static void main(String[] args) {

        SecondClass.m1();
        SecondClass.m2();

    }
}
=============================================

static methods

package com.phani.staticmethods;

public class FirstApplication {
    public static void main(String[] args) {


      // calling static method m1--> using class name
        FirstApplication.m1();
        //calling static method m2--> using class name

        FirstApplication.m2();


    }

    //create static method
    public static void m1()
    {
        System.out.println("This is fist static method");
    }
    public static void m2()
    {
        System.out.println("This is second static method");
    }

}

=====================================================================

package com.phani.staticmethods;

public class SecondAppliation {

    public static void main(String[] args) {
        int res = 10;
        SecondAppliation.m1(res);
        int val1=10;
        int val2=20;
        SecondAppliation.m2(val1, val2);
    }

    // passing one parameter int for static method m1
    public static void m1(int a) {
        System.out.println(a);
    }

    // passing multiple (2) parameters for m2
    public static void m2(int a, int b) {
        System.out.println(a + b);
    }
}
=======================================================

package com.phani.staticmethods;

public class ThirdApplication {

    public static void main(String[] args) {

        ThirdApplication.add(55.5d,66d);
    }


    public static void add(double a,double b)
    {
        System.out.println("adding");
        System.out.println(a+b);
    }
}
===============================

package com.phani.staticmethods;

public class FifthApplication {
    public static void main(String[] args) {
        FifthApplication.add(4, 5, 6);
        int output = FifthApplication.addReturn(10, 5, 6);
        System.out.println(output);
    }


    public static void add(int a, int b, int c) {
        int res = a + b + c;
        System.out.println("add void " + res);
    }

    public static int addReturn(int a, int b, int c) {
        int res = a + b + c;
        return res;
    }
}

======================================================

Using calengine:

package com.phani.basics;

public class CalEngine {

    public static void main(String[] args) {
        double val1[] = {10d, 20d, 30d};
        double val2[] = {5d, 15d, 15d};
        char opsCode[] = {'a', 's', 'm'};
        double res[] = {0, 0, 0};
        calOperaion(opsCode, res, val2, val1);
    }

    public static void calOperaion(char opsCode[], double res[], double val2[], double val1[]) {
        for (int i = 0; i < opsCode.length; i++) {
            if (opsCode[i] == 'a') {
                res[i] = val1[i] + val2[i];
            } else if (opsCode[i] == 's') {
                res[i] = val1[i] - val2[i];
            } else if (opsCode[i] == 'm') {
                res[i] = val1[i] * val2[i];
            }
        }

        System.out.println("Result is");
        for (int i = 0; i < res.length; i++) {
            System.out.println(res[i]);
        }
    }
}

====================================


Calengine with return:

package com.phani.basics;

public class CalEnginewithReturn {

    public static void main(String[] args) {
        double val1[] = {10d, 20d, 30d};
        double val2[] = {5d, 15d, 15d};
        char opsCode[] = {'a', 's', 'm'};
        double res[] = {0, 0, 0};
        double[] res1 = calOperaion(opsCode, res, val2, val1);
        for (int i = 0; i < res1.length; i++) {
            System.out.println(res1[i]);
        }
    }

    public static double[] calOperaion(char opsCode[], double res[], double val2[], double val1[]) {
        for (int i = 0; i < opsCode.length; i++) {
            if (opsCode[i] == 'a') {
                res[i] = val1[i] + val2[i];
            } else if (opsCode[i] == 's') {
                res[i] = val1[i] - val2[i];
            } else if (opsCode[i] == 'm') {
                res[i] = val1[i] * val2[i];
            }
        }
        return res;
    }
}

=====================================================

package basics;

public class StaticExample {

    public static void main(String[] args) {
        StaticExample.m1();//
        int a = 10;
        int b = 20;
        StaticExample.m2(a, b);
        int[] arr = new int[3];
        arr[0] = 9;
        arr[1] = 10;
        arr[2] = 20;
        StaticExample.m3(arr);
        String res=StaticExample.m4();
        System.out.println(res);
        String phani = StaticExample.m5("PHANI");
        System.out.println(phani);

        int[] ints = StaticExample.m6();
        for(int i=0;i<ints.length;i++){
            System.out.println(ints[i]);
        }

    }

    public static String m4()
    {
        return "Phani";
    }
    public static String m5(String input)
    {
        return input;
    }

    public static int[] m6()
    {
        int[] res=new int[2];
        res[0]=10;
        res[1]=20;
        return res;
    }


    public static void m1() {
        System.out.println("this is m1 method");
    }

    public static void m2(int a, int b) {
        System.out.println(a + b);
    }

    public static void m3(int[] arr) {
        int sum = 0;
        for (int i = 0; i < arr.length; i++) {
            sum = sum + arr[i];
        }
        System.out.println(sum);
    }
}
=============================================================================

package basics;

public class NonStaicMethod {

    public static void main(String[] args) {

        NonStaicMethod.m1();
        NonStaicMethod p = new NonStaicMethod();
        p.m2();
        String[] values = new String[2];
        values[0] = "SANTHOSH";
        values[1] = "SREEKAR";
        String[] res = p.res(values);
        for (int i = 0; i < res.length; i++) {
            System.out.println(res[i]);
        }


    }

    public static void m1() {
        System.out.println("this is m1 method");
    }

    public void m2() {
        System.out.println("m2");
    }

    public String[] res(String[] input) {
        String[] res = new String[input.length];
        for (int i = 0; i < input.length; i++) {
            res[i] = input[i].toLowerCase();
        }
        return res;
    }

}
=============================

Reverse string using static method without return

package methods;

public class ReverseString {
    public static void main(String[] args) {
        //"phani"
        //"inahp
        //"priyanka"
        //aknayirp"
        ReverseString.reverseString("hello");
    }

    public static void reverseString(String input)
    {
        String output="";
        char[] charArray = input.toCharArray();
        for(int i=charArray.length-1;i>=0;i--)
        {
            output=output+charArray[i];
        }
        System.out.println(output);
    }
}
============================================================

Reverse string using static method with return

package methods;

public class ReverseString {
    public static void main(String[] args) {
        //"phani"
        //"inahp
        //"priyanka"
        //aknayirp"
        String hello = ReverseString.reverseString("hello");
        System.out.println(hello);
    }

    public static String reverseString(String input)
    {
        String output="";
        char[] charArray = input.toCharArray();
        for(int i=charArray.length-1;i>=0;i--)
        {
            output=output+charArray[i];
        }
        //System.out.println(output);
        return output;

    }
}
======================================================================

Reverse string using non-static method with return

package methods;

public class ReverseString {
    public static void main(String[] args) {
        //"phani"
        //"inahp
        //"priyanka"
        //aknayirp"
        ReverseString reverseString=new ReverseString();
        String hello = reverseString.reverseString("hello");
        System.out.println(hello);
    }

    public  String reverseString(String input)
    {
        String output="";
        char[] charArray = input.toCharArray();
        for(int i=charArray.length-1;i>=0;i--)
        {
            output=output+charArray[i];
        }
        //System.out.println(output);
        return output;

    }
}
===================================================================


samples add

package methods.classbasics;

public class Add {

    public int add(int a, int b) {
        return a + b;
    }

    public int addThree(int a, int b, int c) {
        return a + b + c;
    }

    public static int addFour(int a, int b, int c,int d) {
        return a + b + c+d;
    }
}

=========================================================
Test class to Test Add class

package methods.classbasics;

public class Main {

    public static void main(String[] args) {

        Add a=new Add();
        int res=a.add(10,20);
        System.out.println(res);

        int sum=a.addThree(10,20,30);
        System.out.println(sum);


        int i = Add.addFour(10, 20, 30, 40);
        System.out.println(i);


    }
}


==================================================================
Non static Varible- non static method:

package methods.classbasics;

public class Account {
     String name="phani";
     double salary=9000;


    public  void accountDetails()
    {
        System.out.println(name);
        System.out.println(salary);
    }

}
===
package methods.classbasics;

public class AccountTest {
    public static void main(String[] args) {

        Account account=new Account();
        account.accountDetails();
    }
}

============================================================

static variable= staic method:

package methods.classbasics;

public class Bank {

    static String name="kotak";
    static double stockprice=1900;



    public static void getBankDetails()
    {
        System.out.println(name);
        System.out.println(stockprice);
    }
}
===
package methods.classbasics;

public class BankTest {
    public static void main(String[] args) {


        Bank.getBankDetails();
    }
}
==========================================================

package methods.classbasics;

public class Account2 {


    public  void accountDetails(String name,double salary)
    {
        System.out.println(name);
        System.out.println(salary);
    }

}

======================
package methods.classbasics;

public class AccountTest {
    public static void main(String[] args) {

        Account account=new Account();
        account.accountDetails();

        Account2 account2=new Account2();
        account2.accountDetails("phani",19000);
        account2.accountDetails("reavali",900000);
        account2.accountDetails("bindu",852222);
        account2.accountDetails("niharka",852222);
        account2.accountDetails("sreekar",852222);
    }
}
======================================================================

	                          same class	same package	different package
public	                                Y	       Y	       Y
private                               	Y	       N	       N
default	                                Y	       Y	       N
protected	                            Y	       Y	       N
====================================
constuctor example:

==============================
package methods.classbasics;

public class Job {

    String name;
    String role;
    int id;
   //consttuvtor
    Job()
    {
        name="phani";
        role="senior developer";
        id=1000;
    }

    public  void jobDetails()
    {
        System.out.println(name);
        System.out.println(role);
        System.out.println(id);
    }
}
===========
package methods.classbasics;

public class JobMain {

    public static void main(String[] args) {

        Job job=new Job();
        job.jobDetails();


    }
}
====================================================

package methods.classbasics;

public class Job {

    String name;
    String role;
    int id;

    Job()
    {
        System.out.println("default constutor");
    }

    Job(String jobName, String jobRole, int jobId) {
        name = jobName;
        role = jobRole;
        id = jobId;
    }

    public void jobDetails() {
        System.out.println(name);
        System.out.println(role);
        System.out.println(id);
    }
}
===========================
package methods.classbasics;

public class JobMain {

    public static void main(String[] args) {

       Job job=new Job("Senior Applicaiopn Developer","Developer",10000);
       job.jobDetails();



    }
}
========================================================================

This keyword:

==================
package methods.classbasics;

public class Job {

    String name;
    String role;
    int id;

    Job()
    {
        System.out.println("default constutor");
    }

    Job(String name, String role, int id) {
        this.name = name;
        this.role = role;
        this.id = id;
    }

    public void jobDetails() {
        System.out.println(name);
        System.out.println(role);
        System.out.println(id);
    }
}
=========
package methods.classbasics;

public class JobMain {

    public static void main(String[] args) {

       Job job=new Job("Senior Applicaiopn Developer","Developer",10000);
       job.jobDetails();
    }
}
===========
calling / accesssing non static variable directly is not a good practice like below

package methods.classbasics;


public class Flight {
// Created public varible
    public int seats;
}
===
package methods.classbasics;

public class FlightTest {

    public static void main(String[] args) {
        Flight flight=new Flight();
        flight.seats=1000;
        System.out.println(flight.seats);
    }
}
=====
we can not call variable directly , instead we can use setters and getters
 //setters & getters
package methods.classbasics;


public class Flight {
    private int seats;

    public int getSeats() {
        return seats;
    }

    public void setSeats(int seats) {
        this.seats = seats;
    }
}


=============
package methods.classbasics;

public class FlightTest {

    public static void main(String[] args) {
        Flight flight=new Flight();

        flight.setSeats(10);
        int seats = flight.getSeats();
        System.out.println(seats);

    }
}
=====================================================
example2:

package methods.classbasics;


public class Flight {
    // encapsuation
    private int seats;
    private int passenger;





    public void setSeats(int seats)
    {
        this.seats=seats;
    }

    public int getSeats(){
        return seats;
    }

    public void setPassenger(int passenger)
    {
        this.passenger=passenger;
    }

    public int getPassenger()
    {
        return passenger;
    }


}
=====

package methods.classbasics;

public class FlightTest {

    public static void main(String[] args) {
        Flight flight=new Flight();

        flight.setSeats(110);
        flight.setPassenger(10000);

        int seats = flight.getSeats();
        int passenger = flight.getPassenger();

        System.out.println(seats);
        System.out.println(passenger);


    }
}
=======================================================

Parameter constuctor & getter methods:

package methods.classbasics;


public class Flight {
    // encapsuation
    private int seats;
    private int passenger;

    public Flight(int seats, int passenger) {
        this.seats = seats;
        this.passenger = passenger;
    }

    public Flight() {
    }
//setters & getters


    public int getSeats(){
        return seats;
    }


    public int getPassenger()
    {
        return passenger;
    }


}
=============================
package methods.classbasics;

public class FlightTest {

    public static void main(String[] args) {
        Flight flight=new Flight(100,90);


        int seats = flight.getSeats();
        int passenger = flight.getPassenger();

        System.out.println(seats);
        System.out.println(passenger);


    }
}
==========================================================================================

setters and constuctor example:


package methods.classbasics;

public class Product {
    private int productId;
    private String name;
    private String category;
    private double price;


    public Product() {
    }

    public Product(int productId) {
        this.productId=productId;
    }

    public Product(int productId,String name, String category, double price) {
        this(productId);
        //this.productId=productId;
        this.name = name;
        this.category = category;
        this.price = price;
    }

    public int getProductId() {
        return productId;
    }

    public String getName() {
        return name;
    }



    public String getCategory() {
        return category;
    }


    public double getPrice() {
        return price;
    }


}


=============
package methods.classbasics;

public class ProductTest {

    public static void main(String[] args) {

        Product product=new Product(10,"Aamzon didgital","Mobile",999);

        int productId = product.getProductId();

        System.out.println(productId);


    }
}
========================================================

Inheritence:

package methods.classbasics;

public class Parent {

    public void m1()
    {
        System.out.println("m1 method!!!");
    }

}
==================
package methods.classbasics;

public class Child extends Parent {
    public void m2() {
        System.out.println("m2 method!!!");
    }
}
================================

package methods.classbasics;

public class InheritenceExample {

    public static void main(String[] args) {
        Child child=new Child();
        child.m2();
        child.m1();
    }
}
===========================================
========================================================


package methods.classbasics;

public class Vehicle {

    private String brand;
    private int speed;

    public Vehicle()
    {
    }
    public Vehicle(String brand,int speed)
    {
        this.brand=brand;
        this.speed=speed;
    }

    public String getBrand() {
        return brand;
    }

    public int getSpeed() {
        return speed;
    }

    public void display()
    {
        System.out.println("Brand is "+ brand+"speed is "+speed);
    }
}
=================================
package methods.classbasics;

public class Car extends Vehicle {
    private int doors;

    public Car()
    {

    }

    public Car(String brand,int speed,int doors)
    {
        super(brand,speed);
        this.doors=doors;
    }

    public int getDoors() {
        return doors;
    }

    public void display()
    {
        super.display();
        System.out.println("Door car"+doors);
    }
}
=================

package methods.classbasics;

public class Bus extends Vehicle {
    private int passengerCapacity;

   public Bus()
   {

   }

    public Bus(String brand,int speed,int passengerCapacity)
    {
        super(brand,speed);
        this.passengerCapacity=passengerCapacity;
    }

    public int getPassengerCapacity() {
        return passengerCapacity;
    }

    public void display(){
       super.display();
       System.out.println(passengerCapacity);
    }
}





